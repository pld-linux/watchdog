diff -urN ./watchdog-5.6.orig/src/watchdog.c ./watchdog-5.6/src/watchdog.c
--- ./watchdog-5.6.orig/src/watchdog.c	2009-03-22 13:52:24.000000000 +0100
+++ ./watchdog-5.6/src/watchdog.c	2009-05-30 10:12:58.000000000 +0200
@@ -94,9 +94,9 @@
 {
     fprintf(stderr, "%s version %d.%d, usage:\n", progname, MAJOR_VERSION, MINOR_VERSION);
 #if USE_SYSLOG
-    fprintf(stderr, "%s [-f] [-c <config_file>] [-v] [-s] [-b] [-q]\n", progname);
+    fprintf(stderr, "%s [-f] [-c <config_file>] [-v] [-s] [-b] [-q] [-F]\n", progname);
 #else				/* USE_SYSLOG */
-    fprintf(stderr, "%s [-f] [-c <config_file>] [-s] [-b] [-q]\n", progname);
+    fprintf(stderr, "%s [-f] [-c <config_file>] [-s] [-b] [-q] [-F]\n", progname);
 #endif				/* USE_SYSLOG */
     exit(1);
 }
@@ -441,14 +441,14 @@
 int main(int argc, char *const argv[])
 {
     FILE *fp;
-    int c, force = FALSE, sync_it = FALSE;
+    int c, force = FALSE, sync_it = FALSE, foreground = FALSE;
     int hold;
     char *filename = CONFIG_FILENAME;
     struct list *act;
     pid_t child_pid;
 
 #if USE_SYSLOG
-    char *opts = "d:i:n:fsvbql:p:t:c:r:m:a:";
+    char *opts = "d:i:n:fsvbql:p:t:c:r:m:a:F";
     struct option long_options[] =
     {
 	{"config-file", required_argument, NULL, 'c'},
@@ -457,11 +457,12 @@
 	{"no-action", no_argument, NULL, 'q'},
 	{"verbose", no_argument, NULL, 'v'},
 	{"softboot", no_argument, NULL, 'b'},
+	{"foreground", no_argument, NULL, 'F'},
 	{NULL, 0, NULL, 0}
     };
     long count = 0L;
 #else				/* USE_SYSLOG */
-    char *opts = "d:i:n:fsbql:p:t:c:r:m:a:";
+    char *opts = "d:i:n:fsbql:p:t:c:r:m:a:F";
     struct option long_options[] =
     {
 	{"config-file", required_argument, NULL, 'c'},
@@ -469,6 +470,7 @@
 	{"sync", no_argument, NULL, 's'},
 	{"no-action", no_argument, NULL, 'q'},
 	{"softboot", no_argument, NULL, 'b'},
+	{"foreground", no_argument, NULL, 'F'},
 	{NULL, 0, NULL, 0}
     };
 #endif				/* USE_SYSLOG */
@@ -513,6 +515,9 @@
 	    verbose = TRUE;
 	    break;
 #endif				/* USE_SYSLOG */
+	case 'F':
+	    foreground = TRUE;
+	    break;
 	default:
 	    usage();
 	}
@@ -592,40 +597,44 @@
 	exit(1);
     }
 #if !defined(DEBUG)
-    /* fork to go into the background */
-    if ((child_pid = fork()) < 0) {
-	perror(progname);
-	exit(1);
-    } else if (child_pid > 0) {
-	/* fork was okay          */
-	/* wait for child to exit */
-	if (waitpid(child_pid, NULL, 0) != child_pid) {
+    if (!foreground) {
+	/* fork to go into the background */
+	if ((child_pid = fork()) < 0) {
 	    perror(progname);
 	    exit(1);
+	} else if (child_pid > 0) {
+	    /* fork was okay          */
+	    /* wait for child to exit */
+	    if (waitpid(child_pid, NULL, 0) != child_pid) {
+		perror(progname);
+		exit(1);
+	    }
+	    /* and exit myself */
+	    exit(0);
 	}
-	/* and exit myself */
-	exit(0);
+	/* and fork again to make sure we inherit all rights from init */
+	if ((child_pid = fork()) < 0) {
+	    perror(progname);
+	    exit(1);
+	} else if (child_pid > 0)
+	    exit(0);
     }
-    /* and fork again to make sure we inherit all rights from init */
-    if ((child_pid = fork()) < 0) {
-	perror(progname);
-	exit(1);
-    } else if (child_pid > 0)
-	exit(0);
 #endif				/* !DEBUG */
 
     /* now we're free */
 #if USE_SYSLOG
 #if !defined(DEBUG)
-    /* Okay, we're a daemon     */
-    /* but we're still attached to the tty */
-    /* create our own session */
-    setsid();
-
-    /* with USE_SYSLOG we don't do any console IO */
-    close(0);
-    close(1);
-    close(2);
+    if (!foreground) {
+        /* Okay, we're a daemon     */
+        /* but we're still attached to the tty */
+        /* create our own session */
+        setsid();
+
+        /* with USE_SYSLOG we don't do any console IO */
+        close(0);
+        close(1);
+        close(2);
+    }
 #endif				/* !DEBUG */
 
     /* Log the starting message */
@@ -794,6 +803,7 @@
     /* set signal term to set our run flag to 0 so that */
     /* we make sure watchdog device is closed when receiving SIGTERM */
     signal(SIGTERM, sigterm_handler);
+    signal(SIGINT, terminate);
 
 #if defined(_POSIX_MEMLOCK)
     if (realtime == TRUE) {
diff -urN ./watchdog-5.6.orig/watchdog.8 ./watchdog-5.6/watchdog.8
--- ./watchdog-5.6.orig/watchdog.8	2009-03-12 14:41:04.000000000 +0100
+++ ./watchdog-5.6/watchdog.8	2009-05-30 00:06:00.000000000 +0200
@@ -10,6 +10,7 @@
 .RB [ \-s | \-\-sync ]
 .RB [ \-b | \-\-softboot ] 
 .RB [ \-q | \-\-no\-action ]
+.RB [ \-F | \-\-foreground ]
 .SH DESCRIPTION
 The Linux kernel can reset the system if serious problems are detected.
 This can be implemented via special watchdog hardware, or via a slightly
@@ -107,10 +108,15 @@
 Also your hardware card or the kernel software watchdog driver is not
 enabled. Temperature checking is also disabled since this triggers
 the hardware watchdog on some cards.
+.TP
+.BR \-F ", "\-\-foreground
+Do not fork into the background and do not detach from the terminal.
 .SH FUNCTION
 After
 .B watchdog 
-starts, it puts itself into the background and then tries all checks
+starts, it puts itself into the background (unless
+.I -F
+option is given) and then tries all checks
 specified in its configuration file in turn. Between each two tests it will write to
 the kernel device to prevent a reset. 
 After finishing all tests watchdog goes to sleep for some
